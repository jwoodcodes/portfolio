
notes from how to building an effective dev portfilio

We need to do some work to showcase those projects, though. Even the most amazing
portfolio project might be overlooked if an employer only sees a couple screenshots and a
Github link. We need to guide potential employers through our work, making sure to
highlight the most interesting, impressive, salient parts. The good stuff. Stuff that isn't
always obvious at first glance.

While the
portfolio site is just one piece of the job-hunting puzzle, it’s a piece that can have an
outsized impact

Unless you already have extensive work experience, your side projects are the greatest asset
you have. They are your trophies, and the portfolio site is the trophy case that highlights all
the amazing stuff you’ve done.

pg. 7/8
In my experience, certain kinds of projects are especially high-impact:

• ⭐ Did you build a project to solve a specific niche problem you had, like Levi’s
invoice-scanning app? Employers love to hear about projects like this, because it shows
that you’re able to apply your skills in creative ways, and tackle a project from start to
finish.









DD- things I wish existed that I built for DD- PNODV algo, 3d trade analyzer with sleeper connect, 1:1 values vs. market

















• � Is your project “alive”? Is it shipped, and are people really using it for its intended
purpose? It’s better to have a living, breathing project with real users (even if it’s only
a handful) over a project that was built exclusively as a demo / for the portfolio.





DD- current active production app that has current active users that use the tools







pg. 10
HOW MANY PROJECTS TO INCLUDE?

At least 2. No more than 5.
Something which can be surprising: It’s better to have 1 large polished project than 5 small
projects.
You want to show that you can complete a non-trivial project from start to finish. Depth is
more important than breadth, because it shows that you have the grit and determination to
stick through the hard parts and finish a large project.

pg. 10
Portfolios are meant to highlight your best work, they aren’t meant to be an exhaustive set of
all of your work.

pg. 11-12

In fact, if you’ve spent many hours on a project, there’s a very good chance that you’ve faced
and overcome significant technical challenges. Projects often have hidden complexity, and
1 1
employers are eager to hire developers who are good at solving problems. The main purpose
of a portfolio site is to show prospective employers how you ran into technical challenges,
and overcame them. Your projects don’t need to be flashy or feature-rich.
This is why a detailed portfolio is so important. LinkedIn lets you add a screenshot and a
couple paragraphs about a project, but think about how incomplete that story is. Most
junior-developer projects look the same on the surface; the interesting stuff is below the
surface. And a portfolio site is a great chance to guide the reader through that interesting
stuff.








     --hard challenges overcame--

EBV- global shopping cart using React context and local storage.
-dynamic routing for individual product pages

DD- working with large amounts of data.
- built algo's to work with data
-many database and api calls
-layered async/await calls
-

FB- no framework used. all SaSS and vanilla JS








pg. 12

If you wait until you feel ready to start working as a developer, you’ll never start!


pg. 14

When you apply to work at a company, there are two types of people who are likely to visit
your portfolio site as part of a screening process:
1. HR (Human Resources) hiring managers
2. Software developers
Both types of people are trying to answer the same question—whether you’re worth hiring
—but they have very different sets of criteria.
Our job will be to create a site that communicates our awesomeness to both groups of
people. To do that, we have to learn a little bit about what they’re looking for.

pg. 14-15

Generally, the first point of contact you’ll have is with an HR person. This person likely isn’t
a software developer. Part of their job is to winnow the field; a typical junior developer job
1 4
posting might get up to 100+ applicants, and they’ll want to reduce that number to
something more manageable before scheduling interviews.
Here are some of the traits they’re hoping we’ll show in our application:
• Competence. Has this person built professional-looking projects before?
• Enthusiasm. Does this person seem eager to learn, excited for the kinds of work they
would do on the job?
• Fit. Does this person have the right kind of personality for the company? Have they
worked with the languages and frameworks we use here?
Critically, these folks are often very busy, since they have a lot of applicants to get through
and many other job responsibilities to fulfill. They’ll likely make a decision about moving
forward in the process with you within 30-60 seconds. Our portfolio will need to capture
their attention and communicate competence, enthusiasm and fit in a very short window
of time.

pg. 15-16

The nice thing is that software developers were once in your exact shoes—they remember
what it was like, searching for their first job!
Unlike HR hiring managers, developers generally aren’t very interested in what languages or
frameworks you know. In fact, for junior roles, developers care much more about your
potential rather than what you happen to know already. They want to know if you’ll be easy
to mentor. They want to know if you have the grit to work through tough problems, and the
humility to admit when you don’t know something.
1 5
It can be hard to communicate this stuff through a portfolio site, but there are definitely
things we should avoid doing. We’ll discuss them more later in this chapter.

pg. 18-19

Here’s the biggest problem with this section: if you swap out the names of places and
schools, it can apply equally well to every single bootcamp graduate. The only personal touch is the
last line, and it’s hardly unique; everyone enjoys hanging out with their friends.

In terms of tone, it uses that “professional” tone people take when trying to get a job in the
corporate world. I suspect that this tone might still be relevant when applying to work in a
different industry, but it’s the wrong tone for the vast majority of tech roles.

pg 19-20

This “About Me” section wouldn’t work for anyone else (well, unless they were willing to
make up a big lie about their history!), and that’s the point. It’s true to who I am, and shares
a compelling window into my personality and experience.

Your personality is likely different than mine, so your “About Me” section should be
different too! You can be more formal, if that’s where your comfort zone is. You don’t have
to share a quirky story about how you discovered programming. But it should be interesting,
and it should open the door to more conversation. It should sound like something you
might say in real life.

pg. 20

Let’s look at this through the lens of an HR hiring manager. You have a stack of applications
to get through, and you can only realistically give 10-20% of them interviews. You click
through to Charlie’s portfolio site, and you see the original generic “About me” section. You
spend 3 seconds skimming it, and decide to skip to the next section, since there’s nothing of
interest there. Unless something else on the page catches their eye, they’ll likely move
straight on to the next applicant in the pool. By the time they get to the end, they’ll have
forgotten yours entirely.
Compare that to the revised description, with the anecdotes. As their eyes skim the section,
they catch “The Price Is Right”, which is a very unusual thing to spot on a portfolio site! They
start reading from the beginning, and they get hooked in. They’re interested to know more
about how you solved the problem, and what the answer was (should the contestant spin
again??). You’ve created a memory, and a mild emotional response. After getting through
the stack of applicants, it’s likely that yours will still be in the back of their mind. Most
portfolio sites are generic, and it doesn’t take much to have yours stand out.
Hiring managers care about all the things you’d expect — work experience, volunteer
experience, projects, education, skillset — but they’re also looking for people they’d enjoy
working with. A quirky (and, critically, inoffensive) anecdote can endear you to them.
Someone in that stack might have had a lot more experience than you, but if they forget that
the person exists, they won’t get the job. You might.

pg. 22

Be a tour guide
You don’t want visitors to wander around on a live demo, or go spelunking in the codebase.
We want to highlight the most impressive and interesting parts of our products!
With a live demo, you’re taking a lot of risks:
• Have you tested your site on the browser and/or device the visitor is using?
• Will they follow exactly the same flow you’ve imagined? Unless you have a background
as a senior UX designer, it’s likely that they won’t!
• Does your app require a signup, or any other high-friction setup? Most people don’t
have the patience to sign up for things.
• Have you found and fixed all possible edge-case bugs? Live demos going awry happens
so much that it’s cliché.
Even if everything goes flawlessly, think about what isn’t conveyed in a live demo:

• Why is this project important to you? What inspired it? Why did you choose to build
this?








EBV- wanted to make an ecommerce app with a cart function. knew the business and knew I could make something beautiful with the setting and design a color scheme that went well with their products

DD- I have played fantasy football for almost 20 years and over the years there were tools I wish someone had made and once I gained the programming skill I knew I would build the things I always wished existed. It marryied and old passion with a new one and I have and continue to love to work on it 

FB- I built this a mock up for what I thought the restaurants site could look like. I had worked there for over a decade and never really liked the site they had so I built a better one






• What are the major features that make it unique? How does it compare to existing
products like it?







EBV- they host events at their winery in addition to selling their products and its such a beuatiful venue and many more people know the products than the venue so I wanted to make something that showcased the venue while retaining the shop function of their current site.

DD- sort projections by players on any sleeper team
-PNODV algo
- 1:1 my dynasty values to market values
- 3D trade analyzer as a whole
- sleeper connect aspect of trade analyzer

FB- increased performance and improved UX in menu and beers sections









• What did you start with? Was this built from scratch? Did you have a team? If so,
which parts did you do? Where did the design come from? Was there any
collaboration?
• What was the hardest part of building this product? Where did you get stuck along the
way?
• When you did get stuck, how did you resolve it? How did you overcome the obstacles
you faced?
2 2
• What did you learn from doing this project? How has it affected the work you’ve done
since then?







EBV- dynamic tables that involve images and making them responsive and work with the responsiveness of the rest of the compenets that call them
- incorporating Next dynamic routes for individual product pages
- needed state for the cart to be available in all pages and the values to persist. solved this by incorporating React context and local storage to add a persistant cart function.

DD- I fetch a lot of data in this app, both from my databases and from external API's. I bring in a lot of data and do a ton of work with it to calculate new data sets and push those to different databases to be used in other parts of the application. 

with the external API's a lot of what I ultimatly want from them isn't sent in a form that is useful to me. I had to do a lot of work to get the data in a form that I could use for the purpose I needed it for and because of the shape of the response from the API in some places nested API calls were neccesary just to fully form the data structure I needed. 

There is a ton of data manipulation and backend work done in vanilla JS in the application. I learned a deep knowledge of Javascript and data structures as well as database and aPI interactions while building the different tools of this app and a deep knowledge of the latest next.js to build an app that works with this much data still be performant

FB- This was the first project I built. The hardest part for me was the CSS. I knew I wanted to build it with as minimal JS as possible and just deep dive into CSS and SASS as much as I could. I had to do a lot of reading of MDN and searching for answers on how to do what I wanted or why something wasn/t working the way I thought it should be. It turned out to be a really valuable exercise to focus so deeply on the CSS by not bringing in any more complexity than neccesary





















pg. 23

Earlier, we spoke about how a portfolio lets us squeeze value out of our personal projects. We
built a cool thing, but nobody knows about all the stuff that makes it compelling!
We want to tell a story about how a project came to be. It’s much more interesting than
showing a final product, without context. It also sends a much stronger signal to employers
about what you can do!
It’s probably still a good idea to include links to a live demo, mostly to serve as proof
that you actually built the thing you’re describing. But it should be de-emphasized. Most
folks won’t check. The people who do will likely take 10 seconds to say “yep, this is what
they said it would be”, and bail.

Narration and Personality
You may be sensing a theme here: both the About Me section and the Projects section
should have an element of storytelling. We don’t just want to talk about where we are now,
we want to share some history of how we got here.
Most folks didn’t decide when they were 5 years old to become a programmer—we took a
winding path that led us to where we are now. We want to capture that.

pg. 26

Bravado
I’ve seen a few junior dev portfolios that include language like:
• Head and shoulders above the rest
• Master of Javascript
• 10x junior developer
Most companies hire junior developers based on potential, not based on your current level of
expertise. In fact, when a senior developer reviews your portfolio, they’re hoping to see that
you’re eager to learn, humble, and looking for guidance; folks like that tend to be easier to
mentor, and make for better teammates.
The problem with this language is that it gives the impression that you’re finished learning.
If you’ve mastered Javascript, how are you going to react when you submit some code to be
reviewed, and a lot of changes are requested?
It gives the impression that you’ll be hard to work with.
This is admittedly a rare problem; most folks underestimate their abilities, not overestimate
them. But this still does happen sometimes.

pg. 27

We want to target our portfolio at two cohorts of individuals:
◦ HR Hiring Managers are looking for competence, enthusiasm, and fit
◦ Software developers are looking for folks with grit and determination, and who
will be easy to mentor
• Structurally, our portfolio should feature 3 things on the homepage: an “About Me”
section, a list of projects, and a contact form (or other contact method).
• In terms of tone, your portfolio site should reflect your personality. It should be
specific enough that it would obviously be plagiarism if someone else tried to use your
“About me” section. Avoid generic platitudes or corporate-speak.
• For your “Projects” section, live demos are overhyped and underutilized. We want to
be a tour guide, guiding readers through the most impressive parts of our projects. Tell
a story. We’ll learn more about how to do this in the coming chapters (this is arguably
the most important part of this book!)

pg. 36

You’ll notice that Julia never says things like “I’m a fantastic coder” or “I built an amazing
project”. Julia shows rather than tells.
Recruiters and HR professionals like to see specific keywords that match the tools and
technologies a company uses. Julia lists her skills on the homepage, as well as technologies
used for specific projects (in the example we're looking at: React, GraphQL, styledcomponents, Netlify). She even shares why she chose the tools that she did, getting a little
extra value out of this section.





tools used:

EBV: react, NextJs, mongoDB, node, CSS, github, Vercel

DD: react, NextJs, mongoDB, node, CSS, github, Vercel

FB: vanillaJS, CSS, SASS, express













Enthusiasm
The impression from reading this site is that Julia really enjoys doing this kind of work –
she’s taken many courses beyond the content taught in her formal education, and she
“always has a project in the works”.
There are many ways to demonstrate enthusiasm, but doing it implicitly is always better than
calling it out explicitly (“I am very excited to work as a developer…”)

Telling a Story
Julia shares a small amount about her educational background and her priorities, and speaks
briefly about the context around the Coffee by Benjamin project. She shares the plan of action
for developing the application in 3 phases, and what she learned along the way.
I do think there is even more of an opportunity to share some more background. It would be
great to hear why she chose to work on a coffee product in the first place, how she
collaborated with the designer, and what roadblocks they hit along the way in non-technical
3 6
terms (eg. last-minute client requests, design hurdles, etc). Sharing these details can help
add a bit of color to the picture, and make the narrative more compelling and memorable.

pg.37

Sprinkles
The page features an elegant sequence of on-load animations:
• The main heading fades in, and each line is staggered (They animate in order)
• A line extends, pushing the social media icons out
• The hero image fades in, after a delay
These individual animations work together to create an incredibly polished experience. It's a
flourish that captures attention, and makes a sight more memorable.
You can view this animation yourself at https://www.juliacodes.com/ (though because this
isn't my site, I can't guarantee it'll be the same now)

pg.38

Finally, the website has subtle animations on interactive elements. For example, project
thumbnails zoom on hover:

pg. 40

CHAPTER IV: BUILDING

We’ve covered a lot of the high-level theory around what makes an effective developer
portfolio. Let’s break it down further and talk about how to design and build one.

DESIGN
As a junior or aspiring software developer, does the design of your portfolio matter?
Unfortunately, I think it does. We don’t need to have a stunningly-beautiful portfolio, but it
needs to look reasonably well-designed.
Even though we aren’t applying to work as a UI/UX designer, the people reviewing our
portfolios are human, and humans like things that are well-designed. A poorly-designed site
can make people feel anxious or uncomfortable, and we don’t want to be associated with
those emotions. Even if the reviewers make a conscious effort to disregard the design, I
suspect it has an effect, and it ultimately colors their impression of us.
The Aesthetic-Usability Effect
Users are more forgiving of a website with usability problems if it looks pretty.
Moreover, this happens subconsciously; people believe that if something looks
nice, it will work well, even if they've experienced usability issues firsthand.
This is a well-studied † phenomenon.
Software development is all about how something works, not how something
looks. The unfortunate reality is that people might judge our softwaredevelopment skills based on how aesthetic our portfolios site is. Having a nice
design can subconsciously suggest that we know how to build good software.

pg.43

DOMAIN NAMES
If possible, you should buy a domain for your site, yourname.com. There are many domain
registrars you can use

pg.45

That said, it can be nice to add some sprinkles, to showcase our enthusiasm for UI
development and inject a little whimsy and personality. Some ideas:
• Create a pixelated animated flag for your home country (or LGBTQ+ identity, if
applicable)
• Add a dark/light toggle with micro-interactions
• Add a hover animation on interactive elements (links, buttons)
• Add an interaction where it isn’t expected

pg.47

Cursor tracking is an advanced technique, and this is an exceptional example of a flourish;
please don’t feel like you have to compete with this. Small, creative details that reflect your
personality can go a long way towards making your portfolio stand out and be memorable.

Accessibility is a broad topic, and it’s outside of the scope of this book. Here are some
resources to help, if you’re not already familiar:
https://a11y.coffee/
https://webaim.org/resources/
https://websitesetup.org/html-tutorial-beginners/
You may wonder if this is really a valuable use of time. After all, it’s unlikely
that the hiring managers or developers will themselves have a disability,
right? Do most candidates really submit fully-accessible developer portfolios?
In fact, most candidates don’t; many of the junior-developer portfolios I’ve
seen have been fairly inaccessible. But that’s all the more reason to excel at
this!
Even if the folks reviewing your portfolio don’t have a disability themselves,
they may know how to test a site to see if it’s accessible. This is increasingly
becoming a concern to companies, especially in the US, where the Americans
with Disabilities Act (ADA) ensures that companies cannot discriminate
against people with disabilities. The Supreme Court recently decided, by
denying an appeal, that this law applies to websites. Companies are suddenly
much more inclined to prioritize developers with accessibility experience.
More information: https://www.cnbc.com/2019/10/07/dominos-supremecourt.html
4 7
Additionally, it isn’t fair to assume that no disabled users will try and access
your website; it is estimated that 26% of the United States has at least 1
disability right now, and many will experience a disability, either temporary
or permanent, at some point in their lives. All too often, developers neglect
this segment of the population, though times are changing

pg.48

GENERAL LAYOUT

let’s talk about
some “must-have” elements. If your template is missing one of these elements, I thoroughly
recommend adding it.
Your home page should include:
• A brief “About Me” section that highlights your background and personality.
• A list or grid of projects you’ve worked on.
• Contact information (ideally an embedded form, but a mailto link also works. Don’t
just include links to social media)
If you’re comfortable with the idea, it can also help to add a photo of yourself in the top part
of the homepage.
Each project in the list/grid should link to a “Project Details” page, which describes the
project in greater depth. This is absolutely critical.

pg.48-49

THE “PROJECT DETAIL” PAGE:
Adding “project detail” pages is pretty uncommon among developer
portfolios, but it’s super common among design portfolios.
The design community has realized that screenshots alone are insufficient.
They need to tell a story about their work, to capture all the stuff not shown in
the images.
4 8
This need is even greater for developers. The work that we do is all about the
implementation, not the aesthetics! A screenshot tells very little about our role
on the project. And the source code is far too granular, too low-level.
If you only take one thing from this book, make it this: no matter how cool
your project is, it cannot be summarized by a screenshot and a short
paragraph. Guide the reader through your work!

pg.49

You might struggle with how to describe this project – filling a page about a project can be a
very tall order!
Many junior developers undervalue their own projects. It’s likely the projects you’ve built are
more impressive than you think! Part of this comes down to marketing.



























*******************************************************************************************************************************************


pg.50-52

To help get you started, here is a template for what the sections should be, and which
information each section should hold.
The exact sections will depend on the nature of your project. Feel free to deviate if it doesn’t
quite fit your experience.


sections each project page should have:


1) Introduction
• High-level summary of what the project is
• List of core functionalities / interesting features
• Technologies used
• Links to live demo + source code (if applicable)


2)   Purpose and Goal
• Why did you build this project? Why is it important to you?
• What was the expected outcome of the project?
• What were the initial designs?
• Any other preliminary planning that you did which helps build a narrative


3) Spotlight

• What is the “killer feature” of your project? What feature does it have that took the
most work, or was the most technically impressive? Some possible examples:

◦ User authentication
◦ A feed of items fetched from a database
◦ A particularly tricky UI element (eg. autocomplete, calendar, drag-and-drop)
◦ Anything you’re proud of!
• What were the technical hurdles that got in your way? Any major problems you hit
during development?
• How did you solve those problems? What was the solution? Go deep here, and write
with a developer in mind.
Current status

4)
• This section is optional. If the project is actively being used by real people, talk a little
bit about the current status, who uses it, why they use it, what they say to you about
it, stuff like that.
• If the project was contrived specifically for the portfolio, omit this section.


5) Lessons Learned

• What did you learn doing this project? Feel free to list multiple things. Also feel free to
cover non-technical lessons. It’s great to talk about how you learned to use an
advanced feature of a framework or library, but it’s just as valuable to talk about
project-management experience, or things you learned about shipping projects.
• If you used a framework or other libraries/tools, was it a good choice? How did it
help? In which ways was it insufficient?
• Is your project accessible? What did you learn about accessibility, while building this
project? Describing how you tested your project using keyboard navigation or a screenreader can make for a really compelling story!
• How has this affected the work you’ve done since then? Real examples of how this
project built your knowledge for future projects is fantastic.



If you have screenshots of your project (or photos of the process, eg early sketches), you
should sprinkle them around this page. Weave them into the narrative, use them to
highlight the things you’re talking about in the text.
As I mentioned earlier, this template can vary widely depending on your specific project, but
this is the level of detail you should aim for. It should take up 2-3 pages when printed (more
if you have lots of images).
This is a lot of information, and people often won’t spend that long reading. Because of that,
you need to be strategic: avoid long paragraphs. Make use of many headings, and use lists
within those headings to break up chunks of text. In essence, make it easy to skim. Some
people will get drawn into our narrative and read every word, but we want to make sure the
core messages come across even if someone browses quickly.
Video demos?
A trend I’ve seen occasionally is that developers will include a video
walkthrough, showing off all the main features of the project.
This is overall a good idea; it shows that the app is functional, while making
sure that a “happy path” is followed. You don’t need to worry about the user
wandering off and finding a bug, or using a browser that isn’t fully supported!
It’s not sufficient on its own though. A video will show what the app does, but
not things like why you chose to build it, what technical problems you ran
into, etc. Plus, videos are harder to skim than text; for that reason alone,
many folks will skip watching videos.
If you’re particularly proud of specific functionality on your project, I suggest
adding a video near the top, but repeating a lot of the information in text
below, for folks who skip it.



This is a lot of information, and people often won’t spend that long reading. Because of that,
you need to be strategic: avoid long paragraphs. Make use of many headings, and use lists
within those headings to break up chunks of text. In essence, make it easy to skim. Some
people will get drawn into our narrative and read every word, but we want to make sure the
core messages come across even if someone browses quickly.


**********************************************************************************************************************



























pg.53

TONE AND COPY
Finding the right tone for the text you write can be tricky. The most important thing is that
you want it to sound natural.
5 2
The biggest mistake I see in terms of tone is that developers adopt a “professional” voice
that comes across as stuffy and corporate. I tried to model this voice in my “generic
portfolio” example.
Why is this such a mistake? Think back to that generic portfolio; even though I asked you to
review it carefully, do you remember any of the words from that site?
Formal corporate-speak is incredibly forgettable. It sounds more like an automated
telephone robot than a real human. People have learned to tune that tone out, since it
doesn't usually carry important information.
Here’s your goal: after you’ve written some text, read out loud, ideally to another person.
Does it sound like something you’d say in real life? Rewrite it until it’s conversational.
This should be done within reason; if you curse a lot in your day-to-day life, maybe omit
that part. But I’ve almost never seen a developer write too casually

pg.55

Whatever you do, don't fork another developer’s
portfolio and slap your name on it.
• Pick the tools you're already comfortable with to build your site.
• If possible, buy a domain name. You can host your site on free services like Netlify or
Vercel.
• Add small flourishes that personalize your site.
• Prioritize accessibility. It's an essential piece of the frontend skillset, and one that
employers are increasingly seeking out.
• Your homepage layout should consist of an About section, a Project Details list or grid,
and a contact form (or contact details).
• Each project should link to a page that describes it in depth. Use the provided outline
if you're not sure what to include.

pg.56

As we've already discussed, not all employers will look at portfolio sites. This chapter
include some tips and tricks we can use to increase the number of employers who will see it.
As part of a formal application
Many application forms will ask you for your website. This should absolutely be your
portfolio site!
Additionally, there is often a blank text box near the bottom, where applicants can include
any information they think is relevant. This is a great place to encourage reviewers to check
out your portfolio. You can mention that it includes details on the projects you've built.
Applications will ask you to attach your resume. You can include a link to your portfolio
within your resume; I like to include mine by my contact info at the top.
We don't want to overdo it; some employers will never see it, and that’s ok. Our goal is to
make sure that it's never hard to find, for the employers that are interested.
The further you get in your career, the easier it becomes to find work. The early jobs are the
hardest ones, because you’re competing with so many other aspiring devs for a relatively
small number of junior job postings. Having a huge advantage amongst even 10-20% of
employers is potentially life-changing. And I suspect far more than 20% of employers will at
least glance at your site.
As part of a networking effort
It’s estimated that between 70-80% of jobs are never advertised on job boards†
. Networking
unlocks a larger pool of possible jobs. This is often unwelcome news, especially for
introverts like me. The silver lining is that it's much easier to show off our stellar portfolio
site when we're meeting people through networking.
Networking is far beyond the scope of this book, but here are some quick ways to
incorporate your portfolio into these efforts:
5 6











• Pin your portfolio site on your Github profile. 

















pg.58

Many of the things we’ve discussed about portfolio sites apply to cover letters. In particular:
• Be conversational. Avoid the empty-calorie “corporate speak”.
• Tell a compelling story. Your cover letter should be unique to you. It should feel
dishonest if someone else was to copy your letter and replace your name with theirs.
• Keep the HR hiring managers in mind (and to a lesser extent, developers). You’re
targeting the same demographics.
There’s one other cover-letter-specific thing which is super important: it should be unique
for the company you’re applying to!
Far too often, I’ve seen people copy/paste the same cover letter for each company they apply
to, swapping out 1-2 details like the company name and the sector (“I am interested in the
________ industry”).
It’s OK to copy/paste the parts of the letter that are about your background, but most of the
cover letter should be about how your skills and interests overlap with the company’s. You
should be talking about why you think you’d be a perfect fit for the role. Which specific
attributes of the company align with your specific strengths.
As a rule of thumb, 75% of a cover letter should be unique to each company. Don’t copy/
paste more than 25%.
If you’re applying to an agency or a company that doesn’t have a specific product, this can be
a bit harder, since there isn’t an industry you can identify with. But you can learn a lot about
a company’s culture from their website (and any posted company values), and use that in
your letter.

pg.59

In Appendix B, I’ve included a few cover letters I’ve used which have led to an offer. As with
portfolio sites, your cover letter should be unique to you, so please don’t plagiarize my
letters. But hopefully they can inspire you to write in a similar fashion.

pg.60

The best portfolio sites are the ones that are able to tell a story about the person and their
projects, in a way that makes you feel like you're getting to know the person. 


pg.61

APPENDIX I:
PORTFOLIO TEMPLATES


pg.63

APPENDIX II:
COVER LETTERS






